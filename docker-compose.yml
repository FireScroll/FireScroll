version: "3.7"
name: redpanda-quickstart
networks:
  redpanda_network:
    driver: bridge
volumes:
  redpanda-0: null
  redpanda-1: null
  redpanda-2: null
  minio_storage: null
  dbs1: null
  dbs2: null
services:
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with eachother internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 1G
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # enable logs for debugging.
#      - --default-log-level=debug
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.7
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
  redpanda-1:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:29092
      - --advertise-kafka-addr internal://redpanda-1:9092,external://localhost:29092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:28082
      - --advertise-pandaproxy-addr internal://redpanda-1:8082,external://localhost:28082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:28081
      - --rpc-addr redpanda-1:33145
      - --advertise-rpc-addr redpanda-1:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
#      - --default-log-level=debug
      - --seeds redpanda-0:33145
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.7
    container_name: redpanda-1
    volumes:
      - redpanda-1:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - 28081:28081
      - 28082:28082
      - 29092:29092
      - 29644:9644
    depends_on:
      - redpanda-0
  redpanda-2:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:39092
      - --advertise-kafka-addr internal://redpanda-2:9092,external://localhost:39092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:38082
      - --advertise-pandaproxy-addr internal://redpanda-2:8082,external://localhost:38082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:38081
      - --rpc-addr redpanda-2:33145
      - --advertise-rpc-addr redpanda-2:33145
      - --smp 1
      - --memory 1G
      - --mode dev-container
#      - --default-log-level=debug
      - --seeds redpanda-0:33145
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.7
    container_name: redpanda-2
    volumes:
      - redpanda-2:/var/lib/redpanda/data
    networks:
      - redpanda_network
    ports:
      - 38081:38081
      - 38082:38082
      - 39092:39092
      - 39644:9644
    depends_on:
      - redpanda-0
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.2.3
    networks:
      - redpanda_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda-0
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: user
      MINIO_ROOT_PASSWORD: password
    command: server --console-address ":9001" /data
    container_name: minio
    networks:
      - redpanda_network
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 user password;
      /usr/bin/mc mb myminio/testbucket;
      exit 0;
      "
    networks:
      - redpanda_network
  firescroll-1:
    container_name: firescroll-1
    build: .
    volumes:
      - dbs1:/var/firescroll/dbs
    environment:
      DEBUG: 1
      PRETTY: 1
      NAMESPACE: testns
      REPLICA_GROUP: testrg
      REGION: local
      INSTANCE_ID: firescroll-1
      PARTITIONS: 2
      TOPIC_RETENTION_MS: 10080000
      DB_PATH: "./dbs"
      KAFKA_SESSION_MS: 7000
      GC_INTERVAL_MS: 7000
      BACKUP_INTERVAL_SEC: 5
      AWS_ACCESS_KEY_ID: ZSRTxRDM5S9KuSdj
      AWS_SECRET_ACCESS_KEY: uQpU9msGmoJWcrot5lpLcYRFk4R86Pg3
      S3_ENDPOINT: http://minio:9000
      BACKUP: 1
      AWS_REGION: us-east-1
      S3_BUCKET: testbucket
      BACKUP_TIMEOUT_SEC: 5
      KAFKA_SEEDS: "redpanda-0:9092,redpanda-1:9092,redpanda-2:9092"
      S3_RESTORE: 1
      ADVERTISE_ADDR: firescroll-1:8190
      GOSSIP_BROADCAST_MS: 1000
    networks:
      - redpanda_network
    depends_on:
      - minio
      - redpanda-0
      - redpanda-1
      - redpanda-2
    ports:
      - "8190:8190"
  firescroll-2:
    container_name: firescroll-2
    build: .
    volumes:
      - dbs2:/var/firescroll/dbs
    environment:
      DEBUG: 1
      PRETTY: 1
      NAMESPACE: testns
      REPLICA_GROUP: testrg
      REGION: local
      INSTANCE_ID: firescroll-2
      PARTITIONS: 2
      TOPIC_RETENTION_MS: 10080000
      DB_PATH: "./dbs"
      KAFKA_SESSION_MS: 7000
      GC_INTERVAL_MS: 7000
      BACKUP_INTERVAL_SEC: 5
      AWS_ACCESS_KEY_ID: ZSRTxRDM5S9KuSdj # REPLACE ME
      AWS_SECRET_ACCESS_KEY: uQpU9msGmoJWcrot5lpLcYRFk4R86Pg3 # REPLACE ME
      S3_ENDPOINT: http://minio:9000
      BACKUP: 1
      AWS_REGION: us-east-1
      S3_BUCKET: testbucket
      BACKUP_TIMEOUT_SEC: 5
      KAFKA_SEEDS: "redpanda-0:9092,redpanda-1:9092,redpanda-2:9092"
      S3_RESTORE: 1
      ADVERTISE_ADDR: firescroll-2:8190
      GOSSIP_BROADCAST_MS: 1000
      GOSSIP_PEERS: firescroll-1:8192
    networks:
      - redpanda_network
    depends_on:
      - minio
      - redpanda-0
      - redpanda-1
      - redpanda-2
      - firescroll-1